"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePacker = void 0;
const core_1 = require("../tl/core");
const core_2 = require("../tl/core");
const BinaryWriter_1 = require("./BinaryWriter");
class MessagePacker {
    constructor(state, logger) {
        this._state = state;
        this._queue = [];
        this._ready = new Promise((resolve) => {
            this.setReady = resolve;
        });
        this._log = logger;
    }
    values() {
        return this._queue;
    }
    append(state) {
        this._queue.push(state);
        if (this.setReady) {
            this.setReady(true);
        }
    }
    extend(states) {
        for (const state of states) {
            this._queue.push(state);
        }
        if (this.setReady) {
            this.setReady(true);
        }
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._queue.length) {
                this._ready = new Promise((resolve) => {
                    this.setReady = resolve;
                });
                yield this._ready;
            }
            if (!this._queue[this._queue.length - 1]) {
                this._queue = [];
                return;
            }
            let data;
            let buffer = new BinaryWriter_1.BinaryWriter(Buffer.alloc(0));
            const batch = [];
            let size = 0;
            while (this._queue.length &&
                batch.length <= core_1.MessageContainer.MAXIMUM_LENGTH) {
                const state = this._queue.shift();
                size += state.data.length + core_2.TLMessage.SIZE_OVERHEAD;
                if (size <= core_1.MessageContainer.MAXIMUM_SIZE) {
                    let afterId;
                    if (state.after) {
                        afterId = state.after.msgId;
                    }
                    state.msgId = yield this._state.writeDataAsMessage(buffer, state.data, state.request.classType === "request", afterId);
                    this._log.debug(`Assigned msgId = ${state.msgId} to ${state.request.className ||
                        state.request.constructor.name}`);
                    batch.push(state);
                    continue;
                }
                if (batch.length) {
                    this._queue.unshift(state);
                    break;
                }
                this._log.warn(`Message payload for ${state.request.className || state.request.constructor.name} is too long ${state.data.length} and cannot be sent`);
                state.promise.reject("Request Payload is too big");
                size = 0;
            }
            if (!batch.length) {
                return null;
            }
            if (batch.length > 1) {
                const b = Buffer.alloc(8);
                b.writeUInt32LE(core_1.MessageContainer.CONSTRUCTOR_ID, 0);
                b.writeInt32LE(batch.length, 4);
                data = Buffer.concat([b, buffer.getValue()]);
                buffer = new BinaryWriter_1.BinaryWriter(Buffer.alloc(0));
                const containerId = yield this._state.writeDataAsMessage(buffer, data, false);
                for (const s of batch) {
                    s.containerId = containerId;
                }
            }
            data = buffer.getValue();
            return { batch, data };
        });
    }
}
exports.MessagePacker = MessagePacker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVBhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9leHRlbnNpb25zL01lc3NhZ2VQYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEscUNBQThDO0FBQzlDLHFDQUF1QztBQUN2QyxpREFBOEM7QUFJOUMsTUFBYSxhQUFhO0lBT3RCLFlBQVksS0FBbUIsRUFBRSxNQUFXO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBbUI7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBc0I7UUFDekIsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQztJQUVLLEdBQUc7O1lBQ0wsSUFBSSxDQUFDLElB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