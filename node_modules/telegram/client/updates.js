"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._updateLoop = exports._dispatchUpdate = exports._processUpdate = exports._handleUpdate = exports.catchUp = exports.listEventHandlers = exports.removeEventHandler = exports.addEventHandler = exports.on = void 0;
const tl_1 = require("../tl");
const __1 = require("../");
const big_integer_1 = __importDefault(require("big-integer"));
const network_1 = require("../network");
const index_1 = require("../index");
// export class UpdateMethods {
function on(client, event) {
    return (f) => {
        client.addEventHandler(f, event);
        return f;
    };
}
exports.on = on;
function addEventHandler(client, callback, event) {
    if (event == undefined) {
        // recursive imports :(
        const raw = require("../events/Raw").Raw;
        event = new raw({});
    }
    client._eventBuilders.push([event, callback]);
}
exports.addEventHandler = addEventHandler;
function removeEventHandler(client, callback, event) {
    client._eventBuilders = client._eventBuilders.filter(function (item) {
        return item !== [event, callback];
    });
}
exports.removeEventHandler = removeEventHandler;
function listEventHandlers(client) {
    return client._eventBuilders;
}
exports.listEventHandlers = listEventHandlers;
function catchUp() {
    // TODO
}
exports.catchUp = catchUp;
function _handleUpdate(client, update) {
    if (typeof update === "number") {
        if ([-1, 0, 1].includes(update)) {
            client._dispatchUpdate({
                update: new network_1.UpdateConnectionState(update),
            });
            return;
        }
    }
    //this.session.processEntities(update)
    client._entityCache.add(update);
    client.session.processEntities(update);
    if (update instanceof tl_1.Api.Updates ||
        update instanceof tl_1.Api.UpdatesCombined) {
        // TODO deal with entities
        const entities = new Map();
        for (const x of [...update.users, ...update.chats]) {
            entities.set(index_1.utils.getPeerId(x), x);
        }
        for (const u of update.updates) {
            client._processUpdate(u, update.updates, entities);
        }
    }
    else if (update instanceof tl_1.Api.UpdateShort) {
        client._processUpdate(update.update, null);
    }
    else {
        client._processUpdate(update, null);
    }
}
exports._handleUpdate = _handleUpdate;
function _processUpdate(client, update, others, entities) {
    update._entities = entities || new Map();
    const args = {
        update: update,
        others: others,
    };
    client._dispatchUpdate(args);
}
exports._processUpdate = _processUpdate;
function _dispatchUpdate(client, args) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const [builder, callback] of client._eventBuilders) {
            if (!builder.resolved) {
                yield builder.resolve(client);
            }
            let event = args.update;
            if (event) {
                if (!client._selfInputPeer) {
                    yield client.getMe(true);
                }
                if (!(event instanceof network_1.UpdateConnectionState)) {
                    // TODO fix me
                }
                event = builder.build(event);
                if (event) {
                    if ("_eventName" in event) {
                        event._setClient(client);
                        event.originalUpdate = args.update;
                        event._entities = args.update._entities;
                    }
                    const filter = yield builder.filter(event);
                    if (!filter) {
                        continue;
                    }
                    try {
                        yield callback(event);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            }
        }
    });
}
exports._dispatchUpdate = _dispatchUpdate;
function _updateLoop(client) {
    return __awaiter(this, void 0, void 0, function* () {
        while (client.connected) {
            const rnd = __1.helpers.getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
            yield __1.helpers.sleep(1000 * 60);
            // We don't care about the result we just want to send it every
            // 60 seconds so telegram doesn't stop the connection
            try {
                client._sender.send(new tl_1.Api.Ping({
                    pingId: big_integer_1.default(rnd),
                }));
            }
            catch (e) { }
            // We need to send some content-related request at least hourly
            // for Telegram to keep delivering updates, otherwise they will
            // just stop even if we're connected. Do so every 30 minutes.
            // TODO Call getDifference instead since it's more relevant
            if (!client._lastRequest ||
                new Date().getTime() - client._lastRequest > 30 * 60 * 1000) {
                try {
                    yield client.invoke(new tl_1.Api.updates.GetState());
                }
                catch (e) { }
            }
        }
    });
}
exports._updateLoop = _updateLoop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvdXBkYXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSw4QkFBNEI7QUFDNUIsMkJBQThCO0FBRTlCLDhEQUFpQztBQUNqQyx3Q0FBbUQ7QUFFbkQsb0NBQWlDO0FBRWpDLCtCQUErQjtBQUMvQixTQUFnQixFQUFFLENBQUMsTUFBc0IsRUFBRSxLQUFVO0lBQ2pELE9BQU8sQ0FBQyxDQUFtQixFQUFFLEVBQUU7UUFDM0IsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDLENBQUM7QUFDTixDQUFDO0FBTEQsZ0JBS0M7QUFFRCxTQUFnQixlQUFlLENBQzNCLE1BQXNCLEVBQ3RCLFFBQTBCLEVBQzFCLEtBQW9CO0lBRXBCLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtRQUNwQix1QkFBdUI7UUFDdkIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUN6QyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFRLENBQUM7S0FDOUI7SUFDRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFYRCwwQ0FXQztBQUVELFNBQWdCLGtCQUFrQixDQUM5QixNQUFzQixFQUN0QixRQUEwQixFQUMxQixLQUFtQjtJQUVuQixNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSTtRQUMvRCxPQUFPLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFSRCxnREFRQztBQUVE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