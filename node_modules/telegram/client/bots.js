"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inlineQuery = void 0;
const tl_1 = require("../tl");
const inlineResults_1 = require("../tl/custom/inlineResults");
var GetInlineBotResults = tl_1.Api.messages.GetInlineBotResults;
// BotMethods
function inlineQuery(client, bot, query, entity, offset, geoPoint) {
    return __awaiter(this, void 0, void 0, function* () {
        bot = yield client.getInputEntity(bot);
        let peer = new tl_1.Api.InputPeerSelf();
        if (entity) {
            peer = yield client.getInputEntity(entity);
        }
        const result = yield client.invoke(new GetInlineBotResults({
            bot: bot,
            peer: peer,
            query: query,
            offset: offset || "",
            geoPoint: geoPoint,
        }));
        return new inlineResults_1.InlineResults(client, result, (entity = entity ? peer : undefined));
    });
}
exports.inlineQuery = inlineQuery;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvYm90cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSw4QkFBNEI7QUFDNUIsOERBQTJEO0FBQzNELElBQU8sbUJBQW1CLEdBQUcsUUFBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztBQUc5RCxhQUFhO0FBQ2IsU0FBc0IsV0FBVyxDQUM3QixNQUFzQixFQUN0QixHQUFlLEVBQ2YsS0FBYSxFQUNiLE1BQWlDLEVBQ2pDLE1BQWUsRUFDZixRQUF1Qjs7UUFFdkIsR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLElBQUksR0FBRyxJQUFJLFFBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNuQyxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUM7UUFDRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQzlCLElBQUksbUJBQW1CLENBQUM7WUFDcEIsR0FBRyxFQUFFLEdBQUc7WUFDUixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxLQUFLO1lBQ1osTUFBTSxFQUFFLE1BQU0sSUFBSSxFQUFFO1lBQ3BCLFFBQVEsRUFBRSxRQUFRO1NBQ3JCLENBQUMsQ0FDTCxDQUFDO1FBQ0YsT0FBTyxJQUFJLDZCQUFhLENBQ3BCLE1BQU0sRUFDTixNQUFNLEVBQ04sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUN2QyxDQUFDO0lBQ04sQ0FBQztDQUFBO0FBM0JELGtDQTJCQyJ9