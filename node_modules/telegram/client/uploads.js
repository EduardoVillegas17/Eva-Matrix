"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendFile = exports.uploadFile = exports.CustomFile = void 0;
const tl_1 = require("../tl");
const Helpers_1 = require("../Helpers");
const Utils_1 = require("../Utils");
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const index_1 = require("../index");
class CustomFile {
    constructor(name, size, path, buffer) {
        this.name = name;
        this.size = size;
        this.path = path;
        this.buffer = buffer;
    }
}
exports.CustomFile = CustomFile;
const KB_TO_BYTES = 1024;
const LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;
const UPLOAD_TIMEOUT = 15 * 1000;
function uploadFile(client, fileParams) {
    return __awaiter(this, void 0, void 0, function* () {
        const { file, onProgress } = fileParams;
        let { workers } = fileParams;
        const { name, size } = file;
        const fileId = Helpers_1.readBigIntFromBuffer(Helpers_1.generateRandomBytes(8), true, true);
        const isLarge = size > LARGE_FILE_THRESHOLD;
        const partSize = Utils_1.getAppropriatedPartSize(size) * KB_TO_BYTES;
        const partCount = Math.floor((size + partSize - 1) / partSize);
        const buffer = Buffer.from(yield fileToBuffer(file));
        // We always upload from the DC we are in.
        const sender = yield client._borrowExportedSender(client.session.dcId);
        if (!workers || !size) {
            workers = 1;
        }
        if (workers >= partCount) {
            workers = partCount;
        }
        let progress = 0;
        if (onProgress) {
            onProgress(progress);
        }
        for (let i = 0; i < partCount; i += workers) {
            let sendingParts = [];
            let end = i + workers;
            if (end > partCount) {
                end = partCount;
            }
            for (let j = i; j < end; j++) {
                const bytes = buffer.slice(j * partSize, (j + 1) * partSize);
                sendingParts.push((() => __awaiter(this, void 0, void 0, function* () {
                    yield sender.send(isLarge
                        ? new tl_1.Api.upload.SaveBigFilePart({
                            fileId,
                            filePart: j,
                            fileTotalParts: partCount,
                            bytes,
                        })
                        : new tl_1.Api.upload.SaveFilePart({
                            fileId,
                            filePart: j,
                            bytes,
                        }));
                    if (onProgress) {
                        if (onProgress.isCanceled) {
                            throw new Error("USER_CANCELED");
                        }
                        progress += 1 / partCount;
                        onProgress(progress);
                    }
                }))());
            }
            try {
                yield Promise.race([
                    yield Promise.all(sendingParts),
                    Helpers_1.sleep(UPLOAD_TIMEOUT * workers).then(() => Promise.reject(new Error("TIMEOUT"))),
                ]);
            }
            catch (err) {
                if (err.message === "TIMEOUT") {
                    console.warn("Upload timeout. Retrying...");
                    i -= workers;
                    continue;
                }
                throw err;
            }
        }
        return isLarge
            ? new tl_1.Api.InputFileBig({
                id: fileId,
                parts: partCount,
                name,
            })
            : new tl_1.Api.InputFile({
                id: fileId,
                parts: partCount,
                name,
                md5Checksum: "", // This is not a "flag", so not sure if we can make it optional.
            });
    });
}
exports.uploadFile = uploadFile;
function _fileToMedia(client, { file, forceDocument, fileSize, progressCallback, attributes, thumb, voiceNote = false, videoNote = false, supportsStreaming = false, mimeType, asImage, workers = 1, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!file) {
            return { fileHandle: undefined, media: undefined, image: undefined };
        }
        const isImage = index_1.utils.isImage(file);
        if (asImage == undefined) {
            asImage = isImage && !forceDocument;
        }
        if (typeof file == "object" &&
            !Buffer.isBuffer(file) &&
            !(file instanceof tl_1.Api.InputFile) &&
            !(file instanceof tl_1.Api.InputFileBig) &&
            "read" in file) {
            try {
                return {
                    fileHandle: undefined,
                    media: index_1.utils.getInputMedia(file, {
                        isPhoto: asImage,
                        attributes: attributes,
                        forceDocument: forceDocument,
                        voiceNote: voiceNote,
                        videoNote: videoNote,
                        supportsStreaming: supportsStreaming,
                    }),
                    image: asImage,
                };
            }
            catch (e) {
                return {
                    fileHandle: undefined,
                    media: undefined,
                    image: isImage,
                };
            }
        }
        let media;
        let fileHandle;
        let createdFile;
        if (file instanceof tl_1.Api.InputFile || file instanceof tl_1.Api.InputFileBig) {
            fileHandle = file;
        }
        else if (!(typeof file == "string") || (yield fs_1.promises.lstat(file)).isFile()) {
            if (typeof file == "string") {
                createdFile = new CustomFile(path_1.default.basename(file), (yield fs_1.promises.stat(file)).size, file);
            }
            else if (typeof File !== "undefined" && file instanceof File) {
                createdFile = file;
            }
            else {
                let name;
                if ("name" in file) {
                    name = file.name;
                }
                else {
                    name = "unnamed";
                }
                if (file instanceof Buffer) {
                    createdFile = new CustomFile(name, file.length, "", file);
                }
            }
            if (!createdFile) {
                throw new Error(`Could not create file from ${file}`);
            }
            fileHandle = yield uploadFile(client, {
                file: createdFile,
                onProgress: progressCallback,
                workers: workers,
            });
        }
        else if (file.startsWith("https://") || file.startsWith("http://")) {
            if (asImage) {
                media = new tl_1.Api.InputMediaPhotoExternal({ url: file });
            }
            else {
                media = new tl_1.Api.InputMediaPhotoExternal({ url: file });
            }
        }
        else {
            throw new Error(`"Not a valid path nor a url ${file}`);
        }
        if (media != undefined) {
        }
        else if (fileHandle == undefined) {
            throw new Error(`Failed to convert ${file} to media. Not an existing file or an HTTP URL`);
        }
        else if (asImage) {
            media = new tl_1.Api.InputMediaUploadedPhoto({
                file: fileHandle,
            });
        }
        else {
            // @ts-ignore
            let res = index_1.utils.getAttributes(file, {
                mimeType: mimeType,
                attributes: attributes,
                forceDocument: forceDocument && !isImage,
                voiceNote: voiceNote,
                videoNote: videoNote,
                supportsStreaming: supportsStreaming,
                thumb: thumb,
            });
            attributes = res.attrs;
            mimeType = res.mimeType;
            let uploadedThumb;
            if (!thumb) {
                uploadedThumb = undefined;
            }
            else {
                // todo refactor
                if (typeof thumb == "string") {
                    uploadedThumb = new CustomFile(path_1.default.basename(thumb), (yield fs_1.promises.stat(thumb)).size, thumb);
                }
                else if (typeof File !== "undefined" && thumb instanceof File) {
                    uploadedThumb = thumb;
                }
                else {
                    let name;
                    if ("name" in thumb) {
                        name = thumb.name;
                    }
                    else {
                        name = "unnamed";
                    }
                    if (thumb instanceof Buffer) {
                        uploadedThumb = new CustomFile(name, thumb.length, "", thumb);
                    }
                }
                if (!uploadedThumb) {
                    throw new Error(`Could not create file from ${file}`);
                }
                uploadedThumb = yield uploadFile(client, {
                    file: uploadedThumb,
                    workers: 1,
                });
            }
            media = new tl_1.Api.InputMediaUploadedDocument({
                file: fileHandle,
                mimeType: mimeType,
                attributes: attributes,
                thumb: uploadedThumb,
                forceFile: forceDocument && !isImage,
            });
        }
        return {
            fileHandle: fileHandle,
            media: media,
            image: asImage,
        };
    });
}
function sendFile(client, entity, { file, caption, forceDocument = false, fileSize, clearDraft = false, progressCallback, replyTo, attributes, thumb, parseMode, formattingEntities, voiceNote = false, videoNote = false, buttons, silent, supportsStreaming = false, scheduleDate, workers = 1, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!file) {
            throw new Error("You need to specify a file");
        }
        if (!caption) {
            caption = "";
        }
        entity = yield client.getInputEntity(entity);
        replyTo = index_1.utils.getMessageId(replyTo);
        // TODO support albums in the future
        let msgEntities;
        if (formattingEntities != undefined) {
            msgEntities = formattingEntities;
        }
        else {
            [caption, formattingEntities] = yield client._parseMessageText(caption, parseMode);
        }
        const { fileHandle, media, image } = yield _fileToMedia(client, {
            file: file,
            forceDocument: forceDocument,
            fileSize: fileSize,
            progressCallback: progressCallback,
            attributes: attributes,
            thumb: thumb,
            voiceNote: voiceNote,
            videoNote: videoNote,
            supportsStreaming: supportsStreaming,
            workers: workers,
        });
        if (media == undefined) {
            throw new Error(`Cannot use ${file} as file.`);
        }
        const markup = client.buildReplyMarkup(buttons);
        const request = new tl_1.Api.messages.SendMedia({
            peer: entity,
            media: media,
            replyToMsgId: replyTo,
            message: caption,
            entities: msgEntities,
            replyMarkup: markup,
            silent: silent,
            scheduleDate: scheduleDate,
            clearDraft: clearDraft,
        });
        // todo get message
        return client.invoke(request);
    });
}
exports.sendFile = sendFile;
function fileToBuffer(file) {
    if (typeof File !== "undefined" && file instanceof File) {
        return new Response(file).arrayBuffer();
    }
    else if (file instanceof CustomFile) {
        if (file.buffer != undefined) {
            return file.buffer;
        }
        else {
            return fs_1.promises.readFile(file.path);
        }
    }
    else {
        throw new Error("Could not create buffer from file " + file);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2Fkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvdXBsb2Fkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4QkFBNEI7QUFHNUIsd0NBQThFO0FBQzlFLG9DQUFrRTtBQUVsRSxnREFBd0I7QUFDeEIsMkJBQW9DO0FBQ3BDLG9DQUFpQztBQWVqQyxNQUFhLFVBQVU7SUFNbkIsWUFBWSxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxNQUFlO1FBQ2pFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQVpELGdDQVlDO0FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDOUMsTUFBTSxjQUFjLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUVqQyxTQUFzQixVQUFVLENBQzVCLE1BQXNCLEVBQ3RCLFVBQTRCOztRQUU1QixNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUN4QyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsVUFBVSxDQUFDO1FBRTdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzVCLE1BQU0sTUFBTSxHQUFHLDhCQUFvQixDQUFDLDZCQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RSxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsb0JBQW9CLENBQUM7UUFFNUMsTUFBTSxRQUFRLEdBQUcs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