"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramBaseClient = void 0;
const __1 = require("../");
const Helpers_1 = require("../Helpers");
const connection_1 = require("../network/connection");
const extensions_1 = require("../extensions");
const sessions_1 = require("../sessions");
const tl_1 = require("../tl");
const os_1 = __importDefault(require("os"));
const entityCache_1 = require("../entityCache");
const DEFAULT_DC_ID = 1;
const DEFAULT_IPV4_IP = Helpers_1.IS_NODE ? "149.154.167.51" : "pluto.web.telegram.org";
const DEFAULT_IPV6_IP = "2001:67c:4e8:f002::a";
class TelegramBaseClient {
    constructor(session, apiId, apiHash, { connection = Helpers_1.IS_NODE ? connection_1.ConnectionTCPFull : connection_1.ConnectionTCPObfuscated, useIPV6 = false, timeout = 10, requestRetries = 5, connectionRetries = Infinity, retryDelay = 1000, downloadRetries = 5, autoReconnect = true, sequentialUpdates = false, floodSleepThreshold = 60, deviceModel = "", systemVersion = "", appVersion = "", langCode = "en", systemLangCode = "en", baseLogger = "gramjs", useWSS = typeof window !== "undefined"
        ? window.location.protocol == "https:"
        : false, }) {
        this.__version__ = __1.version;
        if (!apiId || !apiHash) {
            throw new Error("Your API ID or Hash cannot be empty or undefined");
        }
        if (typeof baseLogger == "string") {
            this._log = new extensions_1.Logger();
        }
        else {
            this._log = baseLogger;
        }
        this._log.debug("Running gramJS version " + __1.version);
        if (!(session instanceof sessions_1.StoreSession) &&
            !(session instanceof sessions_1.StringSession)) {
            throw new Error("Only StringSession and StoreSessions are supported currently :( ");
        }
        this._floodSleepThreshold = floodSleepThreshold;
        this.session = session;
        this.apiId = apiId;
        this.apiHash = apiHash;
        this._useIPV6 = useIPV6;
        this._requestRetries = requestRetries;
        this._downloadRetries = downloadRetries;
        this._connectionRetries = connectionRetries;
        this._retryDelay = retryDelay || 0;
        this._timeout = timeout;
        this._autoReconnect = autoReconnect;
        if (!(connection instanceof Function)) {
            throw new Error("Connection should be a class not an instance");
        }
        this._connection = connection;
        this._initRequest = new tl_1.Api.InitConnection({
            apiId: this.apiId,
            deviceModel: deviceModel || os_1.default.type().toString() || "Unknown",
            systemVersion: systemVersion || os_1.default.release().toString() || "1.0",
            appVersion: appVersion || "1.0",
            langCode: langCode,
            langPack: "",
            systemLangCode: systemLangCode,
            proxy: undefined, // no proxies yet.
        });
        this._eventBuilders = [];
        this._floodWaitedRequests = {};
        this._borrowedSenderPromises = {};
        this._bot = undefined;
        this._selfInputPeer = undefined;
        this.useWSS = useWSS;
        this._entityCache = new entityCache_1.EntityCache();
    }
    get floodSleepThreshold() {
        return this._floodSleepThreshold;
    }
    set floodSleepThreshold(value) {
        this._floodSleepThreshold = Math.min(value || 0, 24 * 60 * 60);
    }
    // region connecting
    _initSession() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.session.load();
            if (!this.session.serverAddress ||
                this.session.serverAddress.includes(":") !== this._useIPV6) {
                this.session.setDC(DEFAULT_DC_ID, this._useIPV6 ? DEFAULT_IPV6_IP : DEFAULT_IPV4_IP, this.useWSS ? 443 : 80);
            }
        });
    }
    get connected() {
        return this._sender && this._sender.isConnected();
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._sender) {
                yield this._sender.disconnect();
            }
        });
    }
    get disconnected() {
        return !this._sender || this._sender.disconnected;
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.disconnect(),
                this.session.delete(),
                ...Object.values(this._borrowedSenderPromises).map((promise) => {
                    return promise.then((sender) => sender.disconnect());
                }),
            ]);
            this._eventBuilders = [];
        });
    }
    _authKeyCallback(authKey, dcId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.session.setAuthKey(authKey, dcId);
            yield this.session.save();
        });
    }
}
exports.TelegramBaseClient = TelegramBaseClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZWdyYW1CYXNlQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2NsaWVudC90ZWxlZ3JhbUJhc2VDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkJBQThCO0FBQzlCLHdDQUFxQztBQUNyQyxzREFHK0I7QUFFL0IsOENBQXVDO0FBQ3ZDLDBDQUEwRDtBQUMxRCw4QkFBNEI7QUFFNUIsNENBQW9CO0FBRXBCLGdEQUE2QztBQUk3QyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxlQUFlLEdBQUcsaUJBQU8sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDO0FBQzlFLE1BQU0sZUFBZSxHQUFHLHNCQUFzQixDQUFDO0FBc0IvQyxNQUFhLGtCQUFrQjtJQTRCM0IsWUFDSSxPQUF5QixFQUN6QixLQUFhLEVBQ2IsT0FBZSxFQUNmLEVBQ0ksVUFBVSxHQUFHLGlCQUFPLENBQUMsQ0FBQyxDQUFDLDhCQUFpQixDQUFDLENBQUMsQ0FBQyxvQ0FBdUIsRUFDbEUsT0FBTyxHQUFHLEtBQUssRUFDZixPQUFPLEdBQUcsRUFBRSxFQUNaLGNBQWMsR0FBRyxDQUFDLEVBQ2xCLGlCQUFpQixHQUFHLFFBQVEsRUFDNUIsVUFBVSxHQUFHLElBQUksRUFDakIsZUFBZSxHQUFHLENBQUMsRUFDbkIsYUFBYSxHQUFHLElBQUksRUFDcEIsaUJBQWlCLEdBQUcsS0FBSyxFQUN6QixtQkFBbUIsR0FBRyxFQUFFLEVBQ3hCLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLGFBQWEsR0FBRyxFQUFFLEVBQ2xCLFVBQVUsR0FBRyxFQUFFLEVBQ2YsUUFBUSxHQUFHLElBQUksRUFDZixjQUFjLEdBQUcsSUFBSSxFQUNyQixVQUFVLEdBQUcsUUFBUSxFQUNyQixNQUFNLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVztRQUNsQyxDQUFDLENBQUMsTUFBTSxD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